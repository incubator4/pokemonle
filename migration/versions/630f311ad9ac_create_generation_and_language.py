"""create generation and language

Revision ID: 630f311ad9ac
Revises: 2a432f13a9aa
Create Date: 2025-04-22 20:13:52.255164

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '630f311ad9ac'
down_revision: Union[str, None] = '2a432f13a9aa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    generations = op.create_table('generations',
                                  sa.Column('id', sa.Integer(), nullable=False),
                                  sa.Column('main_region_id', sa.Integer(), nullable=False),
                                  sa.Column('identifier', sa.String(length=50), nullable=False),
                                  sa.PrimaryKeyConstraint('id')
                                  )
    languages = op.create_table('languages',
                                sa.Column('id', sa.Integer(), nullable=False),
                                sa.Column('iso639', sa.String(length=10), nullable=False),
                                sa.Column('iso3166', sa.String(length=10), nullable=False),
                                sa.Column('identifier', sa.String(length=50), nullable=False),
                                sa.Column('official', sa.Boolean(), nullable=False),
                                sa.Column('order', sa.Integer(), nullable=False),
                                sa.PrimaryKeyConstraint('id')
                                )
    generation_names = op.create_table('generation_names',
                                       sa.Column('generation_id', sa.Integer(), nullable=False),
                                       sa.Column('local_language_id', sa.Integer(), nullable=False),
                                       sa.Column('name', sa.String(length=50), nullable=False),
                                       sa.ForeignKeyConstraint(['generation_id'], ['generations.id'], ),
                                       sa.ForeignKeyConstraint(['local_language_id'], ['languages.id'], ),
                                       sa.PrimaryKeyConstraint('generation_id', 'local_language_id')
                                       )
    language_names = op.create_table('language_names',
                                     sa.Column('language_id', sa.Integer(), nullable=False),
                                     sa.Column('local_language_id', sa.Integer(), nullable=False),
                                     sa.Column('name', sa.String(length=50), nullable=False),
                                     sa.ForeignKeyConstraint(['language_id'], ['languages.id'], ),
                                     sa.ForeignKeyConstraint(['local_language_id'], ['languages.id'], ),
                                     sa.PrimaryKeyConstraint('language_id', 'local_language_id')
                                     )

    # get csv dir
    from migration.tool import load_csv

    with load_csv("generations") as csv_data:
        data = [
            {
                "id": int(row["id"]),
                "main_region_id": int(row["main_region_id"]),
                "identifier": row["identifier"]
            }
            for row in csv_data
        ]
        print(data)
        op.bulk_insert(generations, data)


    with load_csv("languages") as csv_data:
        data = [
            {
                "id": int(row["id"]),
                "iso639": row["iso639"],
                "iso3166": row["iso3166"],
                "identifier": row["identifier"],
                "official": bool(row["official"]),
                "order": int(row["order"])
            }
            for row in csv_data
        ]
        print(data)
        op.bulk_insert(languages, data)

    with load_csv("generation_names") as csv_data:
        data = [
            {
                "generation_id": int(row["generation_id"]),
                "local_language_id": int(row["local_language_id"]),
                "name": row["name"]
            }
            for row in csv_data
        ]
        op.bulk_insert(generation_names, data)

    with load_csv("language_names") as csv_data:
        data = [
            {
                "language_id": int(row["language_id"]),
                "local_language_id": int(row["local_language_id"]),
                "name": row["name"]
            }
            for row in csv_data
        ]
        op.bulk_insert(language_names, data)


# ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('language_names')
    op.drop_table('generation_names')
    op.drop_table('languages')
    op.drop_table('generations')
    # ### end Alembic commands ###
